# ADJUST-Assignment1

Please design a script that writes the numbers from 1 - 10 in random order.  Each number should appear only once. You can use bash only.  Please provide tests for the script, along with documentation which should include  the following:    
● Build instructions  ● Usage  ● Description  ● Known limitations / bugs 

Solution:

Since there is only finte sequesnce we can use Fisher–Yates shuffle for generating a random permutation of a finite sequence. 

Script:

~~~~~~~~
#!/bin/bash
echo $(seq 10) |  tr " " "\n" |  shuf | tr '\n' ' '
~~~~~~~~

Usage:

The Fisher-Yates shuffle (named after Ronald Fisher and Frank Yates) is used to randomly permute given input (list). The permutations generated by this algorithm occur with the same probability.

Description::

At first the user writes down the input list. At each step he randomly picks a number from interval \\langle1,\\; k\\rangle, where k is a number of elements, which are not struck out yet. Then the user strikes out k-th unstruck number and writes it down to the end of the output list. The user repeats this procedure until the input list contain some unstruck element.

#################################################################################################

Build Instruction:

echo $(seq 10)

## 'seq' command in Linux is used to generate numbers from FIRST to LAST in steps of INCREMENT. 
[root@server ~]# echo $(seq 10)
1 2 3 4 5 6 7 8 9 10

###################################################################################################

SHUF                                                                                                     User Commands                                                                                                      SHUF(1)

## shuf - generate random permutations

###################################################################################################

tr:: translate
"tr" command is to remove "new line" characters from a file. The new line character is specified as "\n".

###################################################################################################


 I'm aware of the Fisher-Yates perfect shuffle. It is a great shuffle with its O(n) complexity and its guaranteed uniformity. It permits in-place updates of arrays (so in most, if not all, imperative programming environments).




